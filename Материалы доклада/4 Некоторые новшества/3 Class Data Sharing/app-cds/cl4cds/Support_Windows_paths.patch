Index: src/classes/io/simonis/cl4cds.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/classes/io/simonis/cl4cds.java	(revision d143156e8aab8c258fdf84b854e860ccb6af1c92)
+++ src/classes/io/simonis/cl4cds.java	(date 1552640248384)
@@ -26,33 +26,16 @@
 
 package io.simonis;
 
-import java.io.BufferedReader;
-import java.io.DataInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.PrintStream;
+import java.io.*;
 import java.nio.file.Files;
 import java.nio.file.Paths;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Scanner;
-import java.util.Set;
+import java.util.*;
 import java.util.jar.JarFile;
 import java.util.regex.MatchResult;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.zip.ZipEntry;
 
-import javax.naming.directory.DirContext;
-
 /**
  * @author simonis
  *
@@ -127,7 +110,7 @@
       String line;
       long objectID = 0;
       Set<String> klassSet = new HashSet<>();
-      Map<String, String> nameSourceMap = new HashMap<>();
+      Set<String> klassNameSet = new HashSet<>();
       while((line = in.readLine()) != null) {
         if (firstLine.reset(line).matches()) {
           MatchResult mr1 = firstLine.toMatchResult();
@@ -171,11 +154,12 @@
 
             if ("NULL class loader".equals(loader) ||
                 loader.contains("of <bootloader>") || // this is JDK 11 syntax
+                loader.contains("of 'bootstrap'") || // this is JDK 12 syntax
                 loader.contains("jdk/internal/loader/ClassLoaders$PlatformClassLoader" /* && source == jrt image */) ||
                 loader.contains("jdk/internal/loader/ClassLoaders$AppClassLoader" /* && source == jar file */)) {
               out.println(name.replace('.', '/') + " id: " + klass);
               klassSet.add(klass);
-              nameSourceMap.put(name, source);
+              klassNameSet.add(name);
             }
             else {
               // Custom class loader (currently only supported if classes are loaded from jar files ?)
@@ -185,6 +169,9 @@
               }
               else if (source != null && source.startsWith("jar:file:") && source.endsWith("!/")) {
                 sourceFile = source.substring("jar:file:".length(), source.length() - 2);
+                if (sourceFile.startsWith("/") && sourceFile.indexOf(':') == 2) {
+                  sourceFile = sourceFile.substring(1);
+                }
               }
               else {
                 System.err.println("Skipping " + name + " from " + source + " - reason: unknown source format");
@@ -214,6 +201,10 @@
                   System.err.println("Skipping " + name + " from " + sourceFile + " - reason: unknown source");
                   break;
                 }
+                continue;
+              }
+              if (klassNameSet.contains(name)) {
+                System.err.println("Skipping " + name + " from " + sourceFile + " - reason: already dumped");
                 continue;
               }
               List<String> deps = new LinkedList<>();
@@ -222,17 +213,13 @@
                 deps.addAll(Arrays.asList(interf.split("\\s")));
               }
               if (klassSet.containsAll(deps)) {
-                if (source.equals(nameSourceMap.get(name))) {
-                  System.err.println("Skipping " + name + " from " + sourceFile + " - reason: already dumped");
-                  continue;
-                }
                 out.print(name.replace('.', '/') + " id: " + klass + " super: " + parent);
                 if (interf != null) {
                   out.print(" interfaces: " + interf);
                 }
                 out.println(" source: " + sourceFile);
                 klassSet.add(klass);
-                nameSourceMap.put(name, source);
+                klassNameSet.add(name);
               }
               else {
                 System.err.println("Skipping " + name + " from " + sourceFile + " - reason: failed dependencies");
